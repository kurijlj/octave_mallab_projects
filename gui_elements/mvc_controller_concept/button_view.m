source('./app_uistyle_model.m');
source('./item_data_model.m');

function hview = buttonPanelView(varargin)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'buttonPanelView';
    use_case_a = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(hparent)' ...
        }, '');
    use_case_b = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(..., "PROPERTY", VALUE, ...)' ...
        }, '');
    use_case_c = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(...)' ...
        }, '');

    % Define number of supported parameters -----------------------------------

    % Define number of supported positional (numerical) parameters
    numpos = 0;

    % Define number of supported optional parameters
    numopt = 4;

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments. We determin the minimum number of
    % input arguments as number of suported positional arguments (numpos). The
    % number of maximal possible input arguments we determine as sum of numpos
    % and number of optional parameters multiplied by two (this takes into
    % account values of supplied optional parameters)
    narginchk(numpos, numpos + 2*numopt);

    % Parse arguments
    [ ...
        pos, ...
        title, ...
        uistyle, ...
        orientation, ...
        hparent, ...
        on_btn_push_callback ...
        ] = parseparams( ...
        varargin, ...
        'title', 'Button Panel', ...
        'uistyle', appUiStyleModelNewUiStyle(), ...  % Use default UI style
        'StackOrientation', 'vertical', ...  % vertical or horizontal
        'parent', NaN, ...  %WARNING: do not set this to 0 it is the result of groot()!
        'OnBtnPushCallback', NaN ...
        );

    % Validate the number of positional parameters
    if(numpos ~= numel(pos))
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b, ...
            use_case_c ...
            );

    endif;

    % Check for parent object -------------------------------------------------
    if(isnan(hparent))
        % No handle to parent object defined. Spawn new figure to hold the view

        % Initialize GUI toolkit
        graphics_toolkit qt;

        % Create figure and set it as the parent for our view
        hfig = hparent = figure( ...
            'name', title, ...
            'menubar', 'none' ...
            );

    else
        hfig = ancestor(hparent, 'figure');

    endif;

    % Set up the view
    handles = buttonPanelViewLayoutView( ...
        hparent, ...
        'title', title, ...
        'uistyle', uistyle, ...
        'StackOrientation', 'vertical' ...
        );

    hview = handles(1);

endfunction;

function varargout = buttonPanelViewLayoutView(varargin)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'buttonPanelViewLayoutView';
    use_case_a = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(hparent)' ...
        }, '');
    use_case_b = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(..., "PROPERTY", VALUE, ...)' ...
        }, '');
    use_case_c = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(...)' ...
        }, '');

    % Define number of supported parameters -----------------------------------

    % Define number of supported positional (numerical) parameters
    numpos = 1;

    % Define number of supported optional parameters
    numopt = 3;

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments. We determin the minimum number of
    % input arguments as number of suported positional arguments (numpos). The
    % number of maximal possible input arguments we determine as sum of numpos
    % and number of optional parameters multiplied by two (this takes into
    % account values of supplied optional parameters)
    narginchk(numpos, numpos + 2*numopt);

    % Parse arguments
    [ ...
        pos, ...
        title, ...
        uistyle, ...
        orientation ...
        ] = parseparams( ...
        varargin, ...
        'title', 'Button Panel', ...
        'uistyle', appUiStyleModelNewUiStyle(), ...  % Use default UI style
        'StackOrientation', 'vertical' ...  % vertical or horizontal
        );

    % Validate the number of positional parameters
    if(numpos ~= numel(pos))
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b, ...
            use_case_c ...
            );

    endif;

    hparent = pos{1};

    % Initialize UI elements positions ----------------------------------------
    position = buttonPanelViewElementsPosition(hparent, uistyle);

    % Create main panel -------------------------------------------------------

    % Handle to main panel is used as a handle to the view
    varargout{1} = hview = uipanel( ...
        'parent', hparent, ...
        'title', title, ...
        'position', position(1, :) ...
        );

    % Create button controls --------------------------------------------------

    % Set 'Accept' button -----------------------------------------------------
    varargout{2} = uicontrol( ...
        'parent', hview, ...
        'style', 'pushbutton', ...
        'string', 'Accept', ...
        'units', 'normalized', ...
        'position', position(3, :) ...
        );

    % Set 'Cancel' button -----------------------------------------------------
    varargout{3} = uicontrol( ...
        'parent', hview, ...
        'style', 'pushbutton', ...
        'string', 'Cancel', ...
        'units', 'normalized', ...
        'position', position(2, :) ...
        );

endfunction;

function position = buttonPanelViewElementsPosition(hparent, uistyle)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'buttonPanelViewElementsPosition';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(hparent, uistyle)' ...
        }, '');

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    if(2 ~= nargin)
        error( ...
            'Invalid call to %s. Correct usage is:\n%s', ...
            fname, ...
            use_case_a ...
            );

    endif;

    % Validate hparent argument
    if(~ishghandle(hparent ))
        error( ...
            '%s: hparent must be handle to a graphics object', ...
            fname
            );

    endif;

    % Validate uistyle argument
    if(~appUiStyleModelIsUiStyleObj(uistyle))
        error( ...
            '%s: uistyle must be an instance of the App UI Style data structure', ...
            fname
            );

    endif;

    % Define return value as matrix -------------------------------------------
    position = [];

    % Calculate relative extents ----------------------------------------------
    cexts = getpixelposition(hparent);
    horpadabs = uistyle.padding_px / cexts(3);
    verpadabs = uistyle.padding_px / cexts(4);
    btnwdtabs = uistyle.btn_width_px / cexts(3);
    btnhghabs = uistyle.btn_height_px / cexts(4);
    clmwdtabs = uistyle.column_width_px / cexts(3);
    rowhghabs = uistyle.row_height_px / cexts(4);

    % Set padding for the main panel ------------------------------------------
    position = [ ...
        position; ...
        horpadabs, ...
        verpadabs, ...
        1.00 - 2*horpadabs, ...
        1.00 - 2*verpadabs; ...
        ];

    % Set button positions ----------------------------------------------------
    idx = 1;
    while(2 >= idx)
        position = [ ...
            position; ...
            (1.00 - btnwdtabs)/2, ...
            verpadabs + (idx - 1)*(btnhghabs + verpadabs), ...
            btnwdtabs, ...
            btnhghabs; ...
            ];

        idx = idx + 1;

    endwhile;

endfunction;

function buttonPanelViewResize(varargin)
    position = buttonPanelViewElementsPosition(varargin{2}, varargin{1});

    set(varargin{3}, 'position', position(1, :));
    set(varargin{5}, 'position', position(2, :));
    set(varargin{4}, 'position', position(3, :));

endfunction;
