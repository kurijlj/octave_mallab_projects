display('Item View Loaded');

function controller = newItemView(controller)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'newItemView';
    use_case = ' -- result = newItemView(controller)';

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    if(1 ~= nargin)
        error('Invalid call to %s.  Correct usage is:\n%s', fname, use_case);

    endif;

    controller.ui_handles = struct();

    % Create 'Item' view panel ------------------------------------------------
    position = itemViewMainContainerPosition(controller);
    controller.ui_handles.main_container = uipanel( ...
        'parent', controller.parent.ui_handles.main_container, ...
        'title', 'Item View', ...
        'position', position(1, :) ...
        );
    % set( ...
    %     controller.ui_handles.main_container, ...
    %     'sizechangedfcn', @(src, evt)updateItemView(controller) ...
    %     );

    position = itemViewElementsPosition(controller);

    % Set 'Value' view elemets ------------------------------------------------
    controller.ui_handles.item_value_label = uicontrol( ...
        'parent', controller.ui_handles.main_container, ...
        'style', 'text', ...
        'string', 'Item Value', ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', position(1, :) ...
        );
    controller.ui_handles.item_value_field = uicontrol( ...
        'parent', controller.ui_handles.main_container, ...
        'style', 'edit', ...
        'enable', 'inactive', ...
        'string', controller.item.value, ...
        'tooltipstring', 'Item value', ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', position(2, :) ...
        );

    % Set 'Title' view elemets ------------------------------------------------
    controller.ui_handles.item_title_label = uicontrol( ...
        'parent', controller.ui_handles.main_container, ...
        'style', 'text', ...
        'string', 'Item Title', ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', position(3, :) ...
        );
    controller.ui_handles.item_title_field = uicontrol( ...
        'parent', controller.ui_handles.main_container, ...
        'style', 'edit', ...
        'enable', 'inactive', ...
        'string', controller.item.title, ...
        'tooltipstring', 'Item title', ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', position(4, :) ...
        );

endfunction;

function updateItemView(controller)

    position = itemViewMainContainerPosition(controller);
    set( ...
        controller.ui_handles.main_container, ...
        'position', position(1, :) ...
        );

    position = itemViewElementsPosition(controller);
    set( ...
        controller.ui_handles.item_value_field, ...
        'position', position(1, :), ...
        'string', controller.item.value ...
        );
    set( ...
        controller.ui_handles.item_value_label, ...
        'position', position(2, :) ...
        );
    set( ...
        controller.ui_handles.item_title_field, ...
        'position', position(3, :), ...
        'string', controller.item.title ...
        );
    set( ...
        controller.ui_handles.item_title_label, ...
        'position', position(4, :) ...
        );

endfunction;

function position = itemViewMainContainerPosition(controller)

    % Define return value as matrix -------------------------------------------
    position = [];

    % Calculate relative extents ----------------------------------------------
    cexts = getpixelposition(controller.parent.ui_handles.main_container);
    horpadabs = controller.parent.layout.padding_px / cexts(3);
    verpadabs = controller.parent.layout.padding_px / cexts(4);

    % Set padding for the main panel ------------------------------------------
    position = [ ...
        position; ...
        horpadabs, ...
        verpadabs, ...
        1.00 - 2*horpadabs, ...
        1.00 - 2*verpadabs; ...
        ];

endfunction;

function position = itemViewElementsPosition(controller)

    % Define return value as matrix -------------------------------------------
    position = [];

    % Calculate relative extents ----------------------------------------------
    cexts = getpixelposition(controller.ui_handles.main_container);
    horpadabs = controller.parent.layout.padding_px / cexts(3);
    verpadabs = controller.parent.layout.padding_px / cexts(4);
    btnwdtabs = controller.parent.layout.btn_width_px / cexts(3);
    rowhghabs = controller.parent.layout.row_height_px / cexts(4);

    % Set fields position -----------------------------------------------------
    idx = 2;
    while(1 <= idx)
        position = [ ...
            position; ...
            horpadabs, ...
            1.00 - idx*verpadabs - (2*idx)*rowhghabs, ...
            1.00 - 2*horpadabs, ...
            rowhghabs; ...
            horpadabs, ...
            1.00 - idx*verpadabs - (2*idx - 1)*rowhghabs, ...
            1.00 - 2*horpadabs, ...
            rowhghabs; ...
            ];

        idx = idx - 1;

    endwhile;

endfunction;
