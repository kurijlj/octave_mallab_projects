% 'rct_gui_window_level' is a function from the package: 'Radiochromic Film Toolbox'
%
%  -- index = rct_gui_window_level(data, num_bins)
%      Return selected Window/Level adjustment for the given dataset.
%
%      See also: rct_gui_hist_plot.

function [window, level] = rct_gui_window_level(data, num_bins=1024)

    % Intialize return variables to false
    window = -1;
    level = -1;

    % Calculate and normalize data distribution
    data_hist = rct_fast_hist_2D(data, num_bins, 'GUI');
    data_hist = data_hist / max(data_hist);

    % Determine data dynamic range
    min_val = 0;
    max_val = 0;
    depth = 0;

    if(isinteger(data))
        % If we are dealing with integer data we span bins range all over the
        % range of all possible integer values for the supported integer classes
        % (int8, uint8, int16, uint16)
        int_class = class(data);
        min_val = double(intmin(int_class));
        max_val = double(intmax(int_class));

        % We are doing following portion of code because expression:
        %
        %   intmax(int_class) - intmin(int_class)
        %
        % yields values that are different from what we expect, for some reason
        switch(int_class)
            case {'int8' 'uint8'}
                depth = double(intmax('uint8'));

            otherwise
                % We are dealing with 16 bits data
                depth = double(intmax('uint16'));

        endswitch;

    else
        % We are dealing with floating point values. For floating point values
        % we want to span bins range across the range from the minimum value
        % existing in the dataset to the maximum value existing in the dataset
        min_val = min(min(data));
        max_val = max(max(data));
        depth = max_val - min_val;

        if(0 == depth)
            % We have special case where we are dealing with single value
            % dataset. In that case we are spanning bins range all over a
            % possible range of values for the given floating point class
            min_val = double(intmin('int16'));
            max_val = double(intmax('int16'));
            depth = max_val - min_val;

        endif;

    endif;

    % Calculate default values and value ranges for the Window/Level
    window_min = 0;
    window = window_max = depth;
    level_min = min_val + window/2;
    level_max = max_val - window/2;
    level = level_min + ((level_max - level_min)/2);

    % Initialize GUI elements
    graphics_toolkit qt;

    % Get available screen size to calculate main_figure extents
    scr_size = get(0, 'ScreenSize');
    gui_x = floor(scr_size(3) * 0.25);
    gui_y = floor(scr_size(4) * 0.25);
    gui_width = 2 * floor(scr_size(3) * 0.25);
    gui_height = 2 * floor(scr_size(4) * 0.25);

    % Define general padding value for GUI elements
    gui_padding = 10;

    % Calculate GUI elements position, extents and padding
    gui_row_origin = gui_padding;
    gui_row_width = gui_width - 2*gui_padding;
    gui_row_height = 16;

    gui_label_origin = gui_row_origin;
    gui_label_width = gui_row_width;

    gui_slider_origin = gui_row_origin;
    gui_slider_width = gui_row_width;

    gui_scale_label_origin = gui_slider_origin + 20;
    gui_scale_label_width = floor(gui_slider_width/2) - 20;
    gui_scale_label_padding = gui_padding/2;

    % Spawn GUI elements
    main_figure = figure( ...
        'name', 'RCT GUI Controls Test', ...
        'units', 'points', ...
        'userdata', [min_val, max_val, depth], ...
        'position', [gui_x, gui_y, gui_width, gui_height] ...
        );

    % Organise GUI elemtns in the main window control in rows. We index GUI rows
    % from the bottom of the main window control to the top.

    % Set GUI elements for row #10
    gui_row = 10;
    gui_element_position = [ ...
        gui_row_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) ...
        gui_row_width ...
        gui_height - gui_padding - (gui_row - 1)*(gui_row_height + gui_padding) ...
        ];
    image_view = axes( ...
        'parent', main_figure, ...
        'units', 'points', ...
        'box', 'on', ...
        'position', gui_element_position ...
        );
    imshow(data, [window_min window_max], 'parent', image_view);

    % Set GUI elements for row #7
    gui_row = 7;
    gui_element_position = [ ...
        gui_row_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) ...
        gui_row_width ...
        3*gui_row_height ...
        ];
    hist_view = axes( ...
        'parent', main_figure, ...
        'units', 'points', ...
        'box', 'on', ...
        'position', gui_element_position ...
        );
    hist_plot = plot( ...
        'parent', hist_view, ...
        [1:length(data_hist)] * (max(max(data))/length(data_hist)), data_hist, 'b', ...
        [window_min window_max], [0 0], 'r', ...
        [window_max window_max], [0 1], 'r', ...
        [window_min window_max], [1 1], 'r', ...
        [window_min window_min], [1 0], 'r' ...
        );
    set(hist_view, 'xlim', [window_min window_max]);
    set(hist_view, 'xtick', [window_min window_max]);
    set(hist_view, 'xticklabel', {});
    set(hist_view, 'ylim', [0 1]);
    set(hist_view, 'ytick', [0 1]);
    set(hist_view, 'yticklabel', {});

    % Set GUI elements for row #6
    gui_row = 6;
    gui_element_position = [ ...
        gui_label_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) ...
        gui_label_width ...
        gui_row_height ...
        ];
    level_label = uicontrol( ...
        'parent', main_figure, ...
        'style', 'text', ...
        'units', 'points', ...
        'tag', 'level_label', ...
        'string', sprintf('Level: %d', level), ...
        'horizontalalignment', 'left', ...
        'backgroundcolor', [1.00 1.00 1.00], ...
        'position', gui_element_position ...
        );

    % Set GUI elements for row #5
    gui_row = 5;
    gui_element_position = [ ...
        gui_slider_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) ...
        gui_slider_width ...
        gui_row_height ...
        ];
    level_selector = uicontrol( ...
        'parent', main_figure, ...
        'style', 'slider', ...
        'units', 'points', ...
        'tag', 'level', ...
        'tooltipstring', 'Select level', ...
        'callback', @rct_update_window_level, ...
        'min', level_min, 'max', level_max, ...
        'sliderstep', [0.001 0.001], ...
        'value', level, ...
        'enable', 'off', ...
        'position', gui_element_position ...
        );

    % Set GUI elements for row #4
    gui_row = 4;

    % Set left label
    gui_element_position = [ ...
        gui_scale_label_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) + gui_scale_label_padding ...
        gui_scale_label_width ...
        gui_row_height ...
        ];
    level_scale_label_left = uicontrol( ...
        'parent', main_figure, ...
        'style', 'text', ...
        'units', 'points', ...
        'tag', 'level_scale_label_left', ...
        'string', sprintf('%d', level_min), ...
        'horizontalalignment', 'left', ...
        'backgroundcolor', [1.00 1.00 1.00], ...
        'position', gui_element_position ...
        );

    % Set right label
    gui_element_position = [ ...
        gui_scale_label_origin + gui_scale_label_width ...
        (gui_row - 1)*(gui_row_height + gui_padding) + gui_scale_label_padding ...
        gui_scale_label_width ...
        gui_row_height ...
        ];
    level_scale_label_right = uicontrol( ...
        'parent', main_figure, ...
        'style', 'text', ...
        'units', 'points', ...
        'tag', 'level_scale_label_right', ...
        'string', sprintf('%d', level_max), ...
        'horizontalalignment', 'right', ...
        'backgroundcolor', [1.00 1.00 1.00], ...
        'position', gui_element_position ...
        );

    % Set GUI elements for row #3
    gui_row = 3;
    gui_element_position = [ ...
        gui_label_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) ...
        gui_label_width ...
        gui_row_height ...
        ];
    window_label = uicontrol( ...
        'parent', main_figure, ...
        'style', 'text', ...
        'units', 'points', ...
        'tag', 'window_label', ...
        'string', sprintf('Window: %d', window), ...
        'horizontalalignment', 'left', ...
        'backgroundcolor', [1.00 1.00 1.00], ...
        'position', gui_element_position ...
        );

    % Set GUI elements for row #2
    gui_row = 2;
    gui_element_position = [ ...
        gui_slider_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) ...
        gui_slider_width ...
        gui_row_height ...
        ];
    window_selector = uicontrol( ...
        'parent', main_figure, ...
        'style', 'slider', ...
        'units', 'points', ...
        'tag', 'window', ...
        'tooltipstring', 'Select window', ...
        'callback', @rct_update_window_level, ...
        'min', window_min, 'max', window_max, ...
        'sliderstep', [0.001 0.001], ...
        'value', window, ...
        'position', gui_element_position ...
        );

    % Set GUI elements for row #1
    gui_row = 1;

    % Set left label
    gui_element_position = [ ...
        gui_scale_label_origin ...
        (gui_row - 1)*(gui_row_height + gui_padding) + gui_scale_label_padding ...
        gui_scale_label_width ...
        gui_row_height ...
        ];
    window_scale_label_left = uicontrol( ...
        'parent', main_figure, ...
        'style', 'text', ...
        'units', 'points', ...
        'tag', 'window_scale_label_left', ...
        'string', sprintf('%d', window_min), ...
        'horizontalalignment', 'left', ...
        'backgroundcolor', [1.00 1.00 1.00], ...
        'position', gui_element_position ...
        );

    % Set right label
    gui_element_position = [ ...
        gui_scale_label_origin + gui_scale_label_width ...
        (gui_row - 1)*(gui_row_height + gui_padding) + gui_scale_label_padding ...
        gui_scale_label_width ...
        gui_row_height ...
        ];
    window_scale_label_right = uicontrol( ...
        'parent', main_figure, ...
        'style', 'text', ...
        'units', 'points', ...
        'tag', 'window_scale_label_right', ...
        'string', sprintf("%d", window_max), ...
        'horizontalalignment', 'right', ...
        'backgroundcolor', [1.00 1.00 1.00], ...
        'position', gui_element_position ...
        );

    % Generate structure to store and pass to callbacks user data and GUI
    % elements handles
    h = guihandles(main_figure);
    h.min_val = min_val;
    h.max_val = max_val;
    h.depth = depth;
    h.data = data;
    h.data_hist = data_hist;
    h.main_figure = main_figure;
    h.image_view = image_view;
    h.hist_view = hist_view;
    h.hist_plot = hist_plot;
    h.level_label = level_label;
    h.level_selector = level_selector;
    h.level_scale_label_left = level_scale_label_left;
    h.level_scale_label_right = level_scale_label_right;
    h.window_label = window_label;
    h.window_selector = window_selector;
    h.window_scale_label_left = window_scale_label_left;
    h.window_scale_label_right = window_scale_label_right;

    % Save data and GUI handles
    guidata(main_figure, h);

endfunction;


function rct_update_window_level(obj)
    h = guidata(obj);

    switch(gcbo)
        case {h.level_selector}
            % Read selected values from GUI controls
            window = get(h.window_selector, 'value');
            window_min = 0;
            window_max = h.depth;
            level = get(h.level_selector, 'value');

            % Update label indicating level value
            set(h.level_label, 'string', sprintf('Level: %d', level));

            % Re-calculate selection frame size, position and replot data
            % histogram.
            frame_left = level - (window/2);
            frame_right = level + (window/2);
            imshow(h.data, [frame_left frame_right], 'parent', h.image_view);
            h.hist_plot = plot( ...
                'parent', h.hist_view, ...
                [1:length(h.data_hist)] * (max(max(h.data))/length(h.data_hist)), h.data_hist, 'b', ...
                [frame_left frame_right], [0 0], 'r', ...
                [frame_right frame_right], [0 1], 'r', ...
                [frame_left frame_right], [1 1], 'r', ...
                [frame_left frame_left], [0 1], 'r' ...
                );
            set(h.hist_view, 'xlim', [window_min window_max]);
            set(h.hist_view, 'xtick', [window_min window_max]);
            set(h.hist_view, 'xticklabel', {});
            set(h.hist_view, 'ylim', [0 1]);
            set(h.hist_view, 'ytick', [0 1]);
            set(h.hist_view, 'yticklabel', {});

        case {h.window_selector}
            % Read selected values from GUI controls
            window = get(h.window_selector, 'value');
            window_min = 0;
            window_max = h.max_val - h.min_val;
            level = get(h.level_selector, 'value');
            level_min = window + (window/2);
            level_max = window - (window/2);

            % Update level selection control
            set(h.level_selector, 'min', level_min);
            set(h.level_selector, 'max', level_max);
            if(level_min > level)
                level = level_min;

            elseif(level_max < level)
                level = level_max;

            endif;

            % This triggers repositioning of the slider.
            set(h.level_selector, 'value', level_min);
            set(h.level_selector, 'value', level);

            % Update labels indicating window, level, minimum level and maximum
            % level values
            set(h.level_label, 'string', sprintf('Level: %d', level));
            set(h.level_scale_label_left, 'string', sprintf('%d', level_min));
            set(h.level_scale_label_right, 'string', sprintf('%d', level_max));
            set(h.window_label, 'string', sprintf('Window: %d', window));

            if(h.max_val == window)
                set(h.level_selector, 'enable', 'off');

            else
                set(h.level_selector, 'enable', 'on');

            endif;

            % Re-calculate selection frame size, position and replot data
            % histogram.
            frame_left = level - (window/2);
            frame_right = level + (window/2);
            imshow(h.data, [frame_left frame_right], 'parent', h.image_view);
            h.hist_plot = plot( ...
                'parent', h.hist_view, ...
                [1:length(h.data_hist)] * (max(max(h.data))/length(h.data_hist)), h.data_hist, 'b', ...
                [frame_left frame_right], [0 0], 'r', ...
                [frame_right frame_right], [0 1], 'r', ...
                [frame_left frame_right], [1 1], 'r', ...
                [frame_left frame_left], [0 1], 'r' ...
                );
            set(h.hist_view, 'xlim', [window_min window_max]);
            set(h.hist_view, 'xtick', [window_min window_max]);
            set(h.hist_view, 'xticklabel', {});
            set(h.hist_view, 'ylim', [0 1]);
            set(h.hist_view, 'ytick', [0 1]);
            set(h.hist_view, 'yticklabel', {});

    endswitch;

endfunction;
