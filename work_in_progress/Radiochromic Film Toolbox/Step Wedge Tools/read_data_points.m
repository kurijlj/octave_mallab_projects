function read_data_points(f, varargin)
% -----------------------------------------------------------------------------
%
% Function 'read_data_points':
%
% Use:
%       -- read_data_points(f)
%       -- read_data_points(..., "PROPERTY", VALUE, ...)
%
% Description:
%       TODO: Add function descritpion here.
%
% -----------------------------------------------------------------------------
%%  Define function name and use cases strings --------------------------------
    fname = 'read_data_points';
    use_case_a = sprintf(' -- %s(f)', fname);
    use_case_b = sprintf(' -- %s(..., "PROPERTY", VALUE, ...)', fname);

%%  Add required packages to the path -----------------------------------------
    pkg load image;

%%  Validate input arguments --------------------------------------------------

    % Check positional parameters ---------------------------------------------

    % Validate input signal format
    validateattributes( ...
        f, ...
        {'float'}, ...
        { ...
            '2d', ...
            'finite', ...
            'nonempty', ...
            'nonnan' ...
            }, ...
        fname, ...
        'f' ...
        );

    % Check optional arguments (if any) ---------------------------------------

    % Parse optional arguments
    [ ...
        pos, ...
        window ...
        ] = parseparams( ...
        varargin, ...
        'window', [30 30] ...
        );

    % We don't take any more positional arguments
    if(0 ~= numel(pos))
        % Invalid call to function
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b ...
            );

    endif;

    % Validate value supplied for the window
    validateattributes( ...
        window, ...
        {'float'}, ...
        { ...
            'row', ...
            'finite', ...
            'nonempty', ...
            'nonnan', ...
            'numel', 2, ...
            }, ...
        fname, ...
        'window' ...
        );

    if(0 ~= sum(5 > window) || 0 ~= sum(200 < window))
        error( ...
            sprintf( ...
                cstrcat( ...
                    '%s: Window extents not supported (must be > 5x5 or', ...
                    ' < 200x200).' ...
                    ), ...
                fname ...
                ) ...
            );

    endif;

%%  Initialize GUI ------------------------------------------------------------
    graphics_toolkit qt;

    % Spawn main figure
    mfig = figure( ...
        'name', 'Step Wedge Tools: Read Data Points' ...
        );

    % Spawn main panel
    mpanel = uipanel( ...
        'parent', mfig, ...
        'bordertype', 'none' ...
        );

    % Initialize axes for image display
    iview = axes( ...
        'parent', mpanel, ...
        'position', [0, 0, 1, 1] ...
        );

    % Show image on axes
    himg = imshow(mat2gray(f), 'parent', iview);

    % Turn of axes ticks and set title
    axis(iview, 'off');

    % Specify the callback function
    set(himg, 'ButtonDownFcn', @(s, e)image_click(iview, f, window));

    % Initialize app data
    setappdata(mfig, 'data_points', []);

endfunction;  % read_data_points


function image_click(hax, img, window)
    [L, W] = size(img);

    hfig = gcbf();
    dp = getappdata(hfig, 'data_points');

    % Get the location of the mouse click
    select = get(hax, 'CurrentPoint');
    select = round(select(1, 1:2));
    bbox = [ ...
        select(2) - ceil(window(1)/2), ...
        select(1) - ceil(window(2)/2); ...
        select(2) + ceil(window(1)/2), ...
        select(1) + ceil(window(2)/2) ...
        ];
    if(bbox(1, 1) < 0) bbox(1, 1) = 0; endif;
    if(bbox(1, 2) < 0) bbox(1, 2) = 0; endif;
    if(bbox(2, 1) > L) bbox(2, 1) = L; endif;
    if(bbox(2, 2) > W) bbox(2, 2) = W; endif;

    if(isempty(dp))
        dp = [ ...
            select(1), ...
            select(2), ...
            (2*ceil(window(1)/2) + 1)*(2*ceil(window(2)/2) + 1), ...
            mean2(img(bbox(1, 1):bbox(2, 1), bbox(1, 2):bbox(2, 2))), ...
            std2(img(bbox(1, 1):bbox(2, 1), bbox(1, 2):bbox(2, 2))) ...
            ];

    else
        dp(end + 1, :) = [ ...
            select(1), ...
            select(2), ...
            (2*ceil(window(1)/2) + 1)*(2*ceil(window(2)/2) + 1), ...
            mean2(img(bbox(1, 1):bbox(2, 1), bbox(1, 2):bbox(2, 2))), ...
            std2(img(bbox(1, 1):bbox(2, 1), bbox(1, 2):bbox(2, 2))) ...
            ];

    endif;

    hold(hax, 'on');
    plot( ...
        [bbox(1, 2), bbox(1, 2), bbox(2, 2), bbox(2, 2), bbox(1, 2)], ...
        [bbox(1, 1), bbox(2, 1), bbox(2, 1), bbox(1, 1), bbox(1, 1)], ...
        'color', 'g' ...
        );
    plot(dp(:, 1), dp(:, 2), 'color', 'g');

    hold(hax, 'off');
    display(dp);

    setappdata(hfig, 'data_points', dp);

endfunction;
