function msr = measure(AT, ss, window, varargin)
%% -----------------------------------------------------------------------------
%%
%% Function 'measure':
%%
%% -----------------------------------------------------------------------------
%
%  Use:
%       -- msr = measure(AT, ss, window)
%       -- msr = measure(..., "PROPERTY", VALUE, ...)
%
%% Description:
%       Return a Measurement instance containing measured data samples for the
%       given pixel coordinates(AT(, scanset (ss) and window.
%
%       AT: two column matrix of double class
%           Array of coordinates to sample data from for the given scanset.
%
%       ss: instance of the Scanset class
%           A scanset from which to sample dara for the given coordinates.
%
%       window: two elements row vector
%           Two elements row vector determing the size of the sampling window.
%           Window can't be smaller than 1x1 pixels and can't be larger than
%           200x200 pixels.
%
% -----------------------------------------------------------------------------
    fname = 'measure';
    use_case_a = sprintf(' -- msr = %s(AT, ss, window)', fname);
    use_case_a = sprintf(' -- msr = %s(..., "PROPERTY", VALUE, ...)', fname);

    if(3 > nargin)
        % Invalid call to function
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b ...
            );

    endif;

    % Validate positional input arguments -------------------------------------

    % Validate AT argument
    validateattributes( ...
        AT, ...
        {'float'}, ...
        { ...
            '2d', ...
            'finite', ...
            'nonempty', ...
            'nonnan', ...
            'integer' ...
            }, ...
        fname, ...
        'AT' ...
        );

    if(size(AT, 2) > 2)
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: AT must be a two column matrix of integers ", ...
                    "(got %d columns)" ...
                    ), ...
                fname, ...
                size(AT, 2) ...
                ) ...
            );

    endif;  % size(AT, 2) > 2

    % Validate scanset argument
    if(~isa(ss, 'Scanset'))
        error( ...
            '%s: ss must be an instance of the "Scanset" class', ...
            fname ...
            );

    endif;  % ~isa(ss, 'Scanset')

    if(~ss.isvalid())
        error( ...
            '%s: ss must be a valid Scanset instance', ...
            fname ...
            );

    endif;  % ~ss.isvalid()

    l = ss.data_size()(1);
    w = ss.data_size()(2);

    % Validate window argument
    validateattributes( ...
        window, ...
        {'float'}, ...
        { ...
            'row', ...
            'finite', ...
            'nonempty', ...
            'nonnan', ...
            'numel', 2, ...
            'integer', ...
            '>=', 1, ...
            '<=', 200 ...
            }, ...
        fname, ...
        'window' ...
        );

    % Window can't be larger than the scanset's pixel data bounds
    if(l < window(2) || w < window(1))
        % Recalculate the window size
        if(l < window(2)) window(2) = l; endif;
        if(w < window(1)) window(1) = w; endif;

        % Issue a warning
        warning( ...
            sprintf( ...
                cstrcat( ...
                    "%s: data sample area larger than containing pixel ", ...
                    "data area. Resizing to %dx%d" ...
                    ), ...
                fname, ...
                window ...
                ) ...
            );

    endif;  % l < size(window, 1) || w < size(window, 2)

    % Vaidate optional input argument -----------------------------------------

    % Parse arguments
    [ ...
        pos, ...
        title ...
        ] = parseparams( ...
        varargin, ...
        'Title', datestr(datenum(date())) ...
        );

    if(0 ~= numel(pos))
        % Invalid call to function
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b ...
            );

    endif;  % 0 ~= numel(pos)

    % Validate value supplied for the Title
    if(~ischar(title) || isempty(title))
        error('%s: Title must be a non-empty string', fname);

    endif;

    % Sample data points ------------------------------------------------------
    msr = Measurement('Title', title);

    idx = 1;
    while(size(AT, 1) >= idx)
        % For each point in the point coordinates vector calculate coordinates
        % of the sampling are and check if bounds of the sample area fall
        % outside scanset's pixel data bounds.
        x = AT(idx, 1);
        y = AT(idx, 2);
        whh = ceil(window(2) / 2);
        whw = ceil(window(1) / 2);

        % Calculate bounding box coordinates
        bbox = [ ...
            y - whh, x - whw; ...
            y + whh, x + whw ...
            ]

        % Check if upper left corner of the bounding box falls outside pixel
        % data area
        if(bbox(1, 1) < 1)
            % Recalculate coordinates position
            y = y + abs(1 - bbox(1, 1));
            bbox(1, 1) = y - whh;
            bbox(2, 1) = y + whh;

            % Issue a warning message
            warning( ...
                sprintf( ...
                    cstrcat( ...
                        "%s: data sample area spans outside containing ", ...
                        "pixel data area. Recalculating y position for ", ...
                        "the data sample #%d ..." ...
                        ), ...
                    fname, ...
                    idx ...
                    ) ...
                );

        endif;  % bbox(1, 1) < 1
        if(bbox(1, 2) < 1)
            % Recalculate coordinates position
            x = x + abs(1 - bbox(1, 2));
            bbox(1, 2) = x - whw;
            bbox(2, 2) = x + whw;

            % Issue a warning message
            warning( ...
                sprintf( ...
                    cstrcat( ...
                        "%s: data sample area spans outside containing ", ...
                        "pixel data area. Recalculating x position for ", ...
                        "the data sample #%d ..." ...
                        ), ...
                    fname, ...
                    idx ...
                    ) ...
                );

        endif;  % bbox(1, 2) < 1

        % Check if lower right corner of the bounding box falls outside pixel
        % data area
        if(bbox(2, 1) > l)
            % Recalculate coordinates position
            y = y - abs(l - bbox(1, 1));
            bbox(1, 1) = y - whh;
            bbox(2, 1) = y + whh;

            % Issue a warning message
            warning( ...
                sprintf( ...
                    cstrcat( ...
                        "%s: data sample area spans outside containing ", ...
                        "pixel data area. Recalculating y position for ", ...
                        "the data sample #%d ..." ...
                        ), ...
                    fname, ...
                    idx ...
                    ) ...
                );

        endif;  % bbox(2, 1) > l
        if(bbox(2, 2) > w)
            % Recalculate coordinates position
            x = x - abs(w - bbox(1, 2));
            bbox(1, 2) = x - whw;
            bbox(2, 2) = x + whw;

            % Issue a warning message
            warning( ...
                sprintf( ...
                    cstrcat( ...
                        "%s: data sample area spans outside containing ", ...
                        "pixel data area. Recalculating x position for ", ...
                        "the data sample #%d ..." ...
                        ), ...
                    fname, ...
                    idx ...
                    ) ...
                );

        endif;  % bbox(2, 2) > w

        % Load required package
        pkg("load", "image");

        % Extract pixel data inside the sample are
        roipd = ss.pixel_data()(bbox(1, 1):bbox(2, 1), bbox(1, 2):bbox(2, 2), :);
        if(1 == size(roipd, 3))
            roin     = numel(roipd);
            roival   = [mean2(roipd)];
            roistdev = [std2(roipd)];

        else
            roin   = numel(roipd(:, :, 1));
            roival = [ ...
                mean2(roipd(:, :, 1)), ...
                mean2(roipd(:, :, 2)), ...
                mean2(roipd(:, :, 3)) ...
                ];
            roistdev = [ ...
                std2(roipd(:, :, 1)), ...
                std2(roipd(:, :, 2)), ...
                std2(roipd(:, :, 3)) ...
                ];

        endif;  % 1 == size(roipd, 3)

        msr = msr.append(DataSample([x, y], window, roin, roival, roistdev));

        ++idx;

    endwhile;  % End of AT rows trversal

endfunction;  % measure(AT, ss, window)
