function F = makedummyscan(varargin)
%% -----------------------------------------------------------------------------
%%
%% Function 'makedummyscan':
%%
%% -----------------------------------------------------------------------------
%
%  Use:
%       -- F = makedummyscan()
%       -- F = makedummyscan(scsz)
%       -- F = makedummyscan(..., "PROPERTY", VALUE, ...)
%
%% Description:
%       Generate a dummy scan image of specified size and gaussian npoise (if
%       NoiseVariance ~= 0).
%
%       scsz: double, def. 1024
%           Size of dummy scan image in pixels. Only squared dummy scans are
%           supported.
%
%       NoiseStdev: double, def. 0
%           Standard deviation in percents of dynamic range of the gaussian
%           noise that is to be added to the dummy scan. If set to zero no noise
%           is added to the scan.
%
%       ScanType: 'Background'|{'Signal'}|'ZeroLight'
%           Define the type of dummy scan to generate.
%
% -----------------------------------------------------------------------------
    fname = 'makedummyscan';
    use_case_a = sprintf(' -- F = %s()', fname);
    use_case_a = sprintf(' -- F = %s(scsz)', fname);
    use_case_a = sprintf(' -- F = %s(..., "PROPERTY", VALUE, ...)', fname);

    % Set parameters default values
    scsz   = 1024;
    sctype = 'DummyScan';
    nsstdev  = 0;
    drng   = 65535;

    if(0 < nargin && 6 > nargin)
        % Parse arguments
        [ ...
            pos, ...
            sctype, ...
            nsstdev, ...
            drng ...
            ] = parseparams( ...
            varargin, ...
            'ScanType', 'Signal', ...
            'NoiseStdev', 0, ...
            'DynamicRange', 65535 ...
            );

        if(1 < numel(pos))
            % Invalid call to function
            error('Invalid call to %s. Correct usage is:\n%s\n%s\n%s', fname);

        endif;

        if(0 ~= numel(pos))
            % Validate value passed as the scan size
            validateattributes( ...
                scsz, ...
                {'numeric'}, ...
                { ...
                    'nonempty', ...
                    'scalar', ...
                    'integer', ...
                    'finite', ...
                    'positive', ...
                    '>=', 128 ...
                    }, ...
                fname, ...
                'scsz' ...
                );

            scsz = pos{1};

        endif;

        % Validate value passed as the noise variance
        validateattributes( ...
            nsstdev, ...
            {'float'}, ...
            { ...
                'nonempty', ...
                'scalar', ...
                'real', ...
                'finite', ...
                '>=', 0 ...
                }, ...
            fname, ...
            'NoiseStdev' ...
            );

        % Validate value passed as scan type
        validatestring( ...
            sctype, ...
            { ...
                'ZeroLight', ...
                'Background', ...
                'Signal' ...
                }, ...
            fname, ...
            'ScanType' ...
            );

        % Validate value passed as the dynamic range
        validateattributes( ...
            drng, ...
            {'numeric'}, ...
            { ...
                'nonempty', ...
                'scalar', ...
                'integer', ...
                'finite', ...
                'positive', ...
                '>=', 1, ...
                '<=', 65535 ...
                }, ...
            fname, ...
            'DynamicRange' ...
            );

    elseif(0 < nargin && 6 <= nargin)
        % Invalid call to function
        error('Invalid call to %s. Correct usage is:\n%s\n%s\n%s', fname);

    endif;  % 0 == nargin

    % Load required packages
    pkg load image;

    % Compute the pixel data
    zlm = [0.012314, 0.012268, 0.012253];
    ebm = [0.7187, 0.7218, 0.5997];

    if(isequal('ZeroLight', sctype))
        F = ones(scsz, scsz).*zlm(1);
        F(:, :, end+1) = ones(scsz, scsz).*zlm(2);
        F(:, :, end+1) = ones(scsz, scsz).*zlm(3);

    elseif(isequal('Background', sctype))
        F = ones(scsz, scsz).*ebm(1);
        F(:, :, end+1) = ones(scsz, scsz).*ebm(2);
        F(:, :, end+1) = ones(scsz, scsz).*ebm(3);

    else
        dr = ebm - zlm;
        pd = imcomplement(phantom(scsz));
        F = pd.*dr(1);
        F(:, :, end+1) = pd.*dr(2);
        F(:, :, end+1) = pd.*dr(3);
        F(:, :, 1) = F(:, :, 1) + ones(scsz, scsz).*zlm(1);
        F(:, :, 2) = F(:, :, 2) + ones(scsz, scsz).*zlm(2);
        F(:, :, 3) = F(:, :, 3) + ones(scsz, scsz).*zlm(3);

    endif;  % isequal('DummyZeroL', sctype)

    % Add noise if requested
    if(0 ~= nsstdev)
        F = imnoise(F, 'gaussian', 0, nsstdev);

        % Cut off values < 0 and > 1
        m = F < 0; F(m) = 0;
        m = F > 1; F(m) = 1;

    endif;

    % Rescale to given dynamic range
    F = F .* drng;

endfunction;  % makedummyscan
