function WSP = calcwindows(WSM, r)
%% -----------------------------------------------------------------------------
%%
%% Function 'calcwidows':
%%
%% -----------------------------------------------------------------------------
%
%  Use:
%       -- WSP = calcwindows(WSM, r)
%
%% Description:
%          Calculate an array of sampling windows in pixels for the given array
%          of sampling windows given in in milimeters (WSM), for the given
%          resolution (r).
%
% -----------------------------------------------------------------------------
    fname = "calcwindows";
    use_case_a = sprintf(" -- WSP = %s(WSM, r)", fname);

    % Validate the number of arguments ----------------------------------------
    if(2 > nargin)
        % Invalid call to function. Too few arguments
        error( ...
            sprintf( ...
                cstrcat( ...
                    "Invalid call to %s. Too few arguments.\n", ...
                    "Correct usage is:\n%s" ...
                    ), ...
                fname, ...
                use_case_a ...
                ) ...
            );

    elseif(2 < nargin)
        % Invalid call to function. Too many arguments
        error( ...
            sprintf( ...
                cstrcat( ...
                    "Invalid call to %s. Too many arguments.\n", ...
                    "Correct usage is:\n%s" ...
                    ), ...
                fname, ...
                use_case_a ...
                ) ...
            );

    endif;

    % Validate positional input arguments -------------------------------------

    % Validate window size argument (l)
    validateattributes( ...
        WSM, ...
        {"numeric"}, ...
        { ...
            "finite", ...
            "nonempty", ...
            "2d", ...
            "ndims", 2, ...
            "ncols", 2, ...
            ">", 0 ...
            }, ...
        fname, ...
        "WSM" ...
        );

    % Validate resolution argument (r)
    validateattributes( ...
        r, ...
        {"numeric"}, ...
        { ...
            "finite", ...
            "nonempty", ...
            "scalar", ...
            ">=", 75 ...
            }, ...
        fname, ...
        "r" ...
        );

    % Do the computation ------------------------------------------------------

    % Allocate return value
    WSP = zeros(size(WSM));

    % Loop over input array elements and calculate resulting windows
    idx = 1;
    while(size(WSM, 1) >= idx)
        WSP(idx, 1) = calcwinlen(WSM(idx, 1), r);
        WSP(idx, 2) = calcwinlen(WSM(idx, 2), r);

        idx++;

    endwhile;

endfunction;  % calcwindows(WSM, r)
