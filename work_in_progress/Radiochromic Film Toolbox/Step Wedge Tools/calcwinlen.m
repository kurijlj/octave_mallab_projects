function wl = calcwinlen(l, r)
%% -----------------------------------------------------------------------------
%%
%% Function 'calcwinlen':
%%
%% -----------------------------------------------------------------------------
%
%  Use:
%       -- wl = calcwinlen(l, r)
%
%% Description:
%          Calculate the sampling window size in pixels for the given window
%          size in milimeters (l), for the given resolution (r).
%
% -----------------------------------------------------------------------------
    fname = "calcwinlen";
    use_case_a = sprintf(" -- wl = %s(l, r)", fname);

    % Validate the number of arguments ----------------------------------------
    if(2 > nargin)
        % Invalid call to function. Too few arguments
        error( ...
            sprintf( ...
                cstrcat( ...
                    "Invalid call to %s. Too few arguments.\n", ...
                    "Correct usage is:\n%s" ...
                    ), ...
                fname, ...
                use_case_a ...
                ) ...
            );

    elseif(2 < nargin)
        % Invalid call to function. Too many arguments
        error( ...
            sprintf( ...
                cstrcat( ...
                    "Invalid call to %s. Too many arguments.\n", ...
                    "Correct usage is:\n%s" ...
                    ), ...
                fname, ...
                use_case_a ...
                ) ...
            );

    endif;

    % Validate positional input arguments -------------------------------------

    % Validate window size argument (l)
    validateattributes( ...
        l, ...
        {"numeric"}, ...
        { ...
            "finite", ...
            "nonempty", ...
            "scalar", ...
            ">", 0 ...
            }, ...
        fname, ...
        "l" ...
        );

    % Validate resolution argument (r)
    validateattributes( ...
        r, ...
        {"numeric"}, ...
        { ...
            "finite", ...
            "nonempty", ...
            "scalar", ...
            ">=", 75 ...
            }, ...
        fname, ...
        "r" ...
        );

    % Do the computation ------------------------------------------------------

    % Calculate initial estimate of the window size
    p = round(l * (r/25.4));

    % Create a range of window size estimates in pixels to feed to the merit
    % function
    e = [p - 2, p - 1, p, p + 1, p + 2];

    % Convert back to milimeters
    em = e.*(25.4/r);

    % Find the value that is both greater than given value l but also the
    % closest to it
    of = min(em(em > l));

    % Return the optimal result
    wl = e(find(em == of));

endfunction;  % calcwinlen(l, dpi)
