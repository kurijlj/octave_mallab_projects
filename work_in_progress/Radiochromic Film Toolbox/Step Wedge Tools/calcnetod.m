function mnod = calcnetod(msig, mbkg, mzrl=NaN, varargin)
%% -----------------------------------------------------------------------------
%%
%% Function 'calcnetod':
%%
%% -----------------------------------------------------------------------------
%
%  Use:
%       -- mnod = calcnetod(msig, mbkg)
%       -- mnod = calcnetod(msig, mbkg, mzrl)
%       -- mnod = calcnetod(..., "PROPERTY", VALUE, ...)
%
%% Description:
%          Calculate netOD for the given set of measured signal pixel valueas
%          and for the given set of measured background pixel values
%          according to procedure described in the article:
%          https://doi.org/10.1016/j.ejmp.2018.05.014
%
%          Set of the measured background data samples must consist of only one
%          data sample. It is not mandatory for the calculation to signal data
%          samples and background data samples have identical windows (ROIs).
%          However, it is mandatory for the zero-light and control piece
%          data samples to be equivalent (see help on DataSample class).
%
% -----------------------------------------------------------------------------
    fname = 'calcnetod';
    use_case_a = sprintf(' -- mnod = %s(msig, mbkg)', fname);
    use_case_b = sprintf(' -- mnod = %s(msig, mbkg, mzrl)', fname);
    use_case_c = sprintf(' -- mnod = %s(..., "PROPERTY", VALUE, ...)', fname);

    if(2 < nargin)
        % Invalid call to function
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b, ...
            use_case_c ...
            );

    endif;

    % Validate positional input arguments -------------------------------------

    % Validate signal measurement argument
    if(~isa(msig, "Measurement") || msig.isempty())
        % Issue error message and abort calculation
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: msig must be an non-empty instance of the ", ...
                    "'Measurement' class" ...
                    ), ...
                fname ...
                ) ...
            );

    endif;  % ~isa(msig, "Measurement") || msig.isempty()

    % Validate background measurement argument
    if(~isa(mbkg, "Measurement") || mbkg.isempty())
        % Issue error message and abort calculation
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: mbkg must be an non-empty instance of the ", ...
                    "'Measurement' class" ...
                    ), ...
                fname ...
                ) ...
            );

    endif;  % ~isa(mbkg, "Measurement") || mbkg.isempty()
    if(1 ~= mbkg.numel())
        % Issue error message and abort calculation
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: mbkg must be exactly one data sample long" ...
                    ), ...
                fname ...
                ) ...
            );

    endif;  % 1 ~= mbkg.numel()

    % If zero-light argument is set to Nan use the default value
    if(isnan(mzrl))
        % For the default value we copy data sample from control piece
        % measurement and we set value and the stdev to zero
        dsbkg = mbkg.at(1);
        mzrl = Measurement( ...
            DataSample( ...
                dsbkg.position, ...
                dsbkg.window, ...
                dsbkg.n, ...
                dsbkg.value .* 0, ...
                dsbkg.stdev .* 0 ...
                ) ...
            );

    endif;  % isnan(mzrl)

    % Validate zero-light measurement argument
    if(~isa(mzrl, "Measurement") || mzrl.isempty())
        % Issue error message and abort calculation
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: mzrl must be an non-empty instance of the ", ...
                    "'Measurement' class" ...
                    ), ...
                fname ...
                ) ...
            );

    endif;  % ~isa(mzrl, "Measurement") || mzrl.isempty()
    if(1 ~= mzrl.numel())
        % Issue error message and abort calculation
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: mzrl must be exactly one data sample long" ...
                    ), ...
                fname ...
                ) ...
            );

    endif;  % 1 ~= mzrl.numel()
    if(~mbkg.isequivalent(mzrl))
        % Issue error message and abort calculation
        error( ...
            sprintf( ...
                cstrcat( ...
                    "%s: zero-light and control piece measurements must ", ...
                    "be equivalent (see help on 'Measurement' class)" ...
                    ), ...
                fname ...
                ) ...
            );

    endif;  % ~mbkg.isequivalent(mzrl)

    % Parse optional arguments ------------------------------------------------
    [ ...
        pos, ...
        title ...
        ] = parseparams( ...
        varargin, ...
        'Title', datestr(datenum(date())) ...
        );

    if(0 ~= numel(pos))
        % Invalid call to function
        error( ...
            "Invalid call to %s. Correct usage is:\n%s\n%s\n%s", ...
            fname, ...
            use_case_a, ...
            use_case_b, ...
            use_case_c ...
            );

    endif;  % 0 ~= numel(pos)

    % Validate optional arguments ---------------------------------------------

    % Validate Title argument
    if(~ischar(title) || isempty(title))
        error('%s: Title must be a non-empty string', fname);

    endif;

    % Do the computation ------------------------------------------------------

    % Initialize the return variable
    mnod = Measurement('Title', title);

    idx = 1;
    dsbkg = mbkg.at(1);
    dszrl = mzrl.at(1);
    while(msig.numel() >= idx)
        dssig = msig.at(idx);

        % Calculate the signal value corrected for the zero-light
        scorr = dssig.value - dszrl.value;

        % Calculate the background value corrected for the zero-ligh
        bcorr = dsbkg.value - dzrl.value;

        % Calculate the ratio of the corrected background value to the
        % corrected signal value
        rcorr = bcorr / scorr;

        % Calculate the netOD value
        nod = log10(rcorr);

        % Calculate the standard deviation for the netOD as the function of
        % number of samples and standard error of indirectly measured quantity
        nodstd = (sqrt(dssig.n)/3) ...
            * ( ...
                (dsbkg.stderr(3) + dszrl.stderr(3))/(ccorr) ...
                + (dssig.stderr(3) + dszrl.stderr(3))/(scorr) ...
                ) ...
            * rcorr;
        nodstd = (sqrt(dssig.n) * rcorr * ( ...
                (dsbkg.stderr(3) + dszrl.stderr(3))/(ccorr) ...
                + (dssig.stderr(3) + dszrl.stderr(3))/(scorr) ...
                )) / (3 * log(10)^2 * nod);

        mnod = mnod.append( ...
            DataSample( ...
                dssig.position, ...
                dssig.window, ...
                dssig.n, ...
                nod, ...
                nodstd ...
                ) ...
            );

        ++idx;

endfunction;  % calcnetod()
