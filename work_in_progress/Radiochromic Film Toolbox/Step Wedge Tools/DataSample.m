classdef DataSample
%% ----------------------------------------------------------------------------
%%
%% Class 'DataSample':
%%
%% ----------------------------------------------------------------------------
%
%% Description:
%       Data structure representing one sampled pixel are from the image (i.e.
%       optical density). One data sample is represented by coordinates of
%       the center of sampled area (row and column), sampled area 'window'
%       (i.e. size in pixels), number of data samples inside the sampled area
%       (i.e. number of pixels), mean pixel value and standard deviation of
%       pixel values.
%
%       'DataSample' class instances have following properties:
%
%       position: two-element row vestor, def. [0 0]
%           Coordinates of the center of sampled pixel area [row column].
%           Sample coordinates don't have to represent exact center of the
%           sampled image are, especially at the image bordes where clippig can
%           occur.
%
%       window: two-element row vector, def. [0 0]
%           Size of the sampled area (in pixels). The format is [length width].
%
%       n: double, def. 0
%           Number of sampled pixels.
%
%       value: double, def. 0
%           Mean pixel value of the sampled pixels.
%
%       stdev: double, def. 0
%           Standard deviation from mean value of the sampled pixel values.
%
%  ----------------------------------------------------------------------------

    properties (SetAccess = private, GetAccess = public)
%%  ---------------------------------------------------------------------------
%%
%%  Properties section
%%
%%  ---------------------------------------------------------------------------
        position = [];
        window   = [];
        n        = 0;
        value    = 0;
        stdev    = 0;

    endproperties;


    methods (Access = public)
%%  ---------------------------------------------------------------------------
%%
%%  Public methods section
%%
%%  ---------------------------------------------------------------------------

        function ds = DataSample(varargin)
%  ----------------------------------------------------------------------------
%
%  Method 'DataSample':
%
%  Use:
%       -- ds = DataSample()
%       -- ds = DataSample(position, window, value, stdev)
%       -- ds = DataSample(other)
%
%  Description:
%          Class constructor.
%
%  ----------------------------------------------------------------------------
            fname = 'DataSample';
            use_case_a = sprintf(' -- ds = %s()', fname);
            use_case_b = sprintf( ...
                cstrcat( ...
                    ' -- ds = ', ...
                    '%s(position, window, value, stdev)' ...
                    ), ...
                fname ...
                );
            use_case_c = sprintf(' -- ds = %s(other)', fname);

            if(0 == nargin)
                % Default constructor invoked

            elseif(1 == nargin)
                % Copy constructor invoked
                if(isa(varargin{1}, 'DataSample'))
                    ds.position = varargin{1}.position;
                    ds.window   = varargin{1}.window;
                    ds.n        = varargin{1}.n;
                    ds.value    = varargin{1}.value;
                    ds.stdev    = varargin{1}.stdev;

                else
                    error( ...
                        sprintf( ...
                            cstrcat( ...
                                '%s: other must be an instance of the', ...
                                ' "DataSample" class' ...
                                ), ...
                            fname ...
                            ) ...
                        );

                endif;

            elseif(4 == nargin)
                % Regular constructor invoked

                % Validate position argument
                validateattributes( ...
                    varargin{1}, ...
                    {'float'}, ...
                    { ...
                        'row', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan', ...
                        'numel', 2, ...
                        '>=', 1, ...
                        }, ...
                    fname, ...
                    'position' ...
                    );

                % Validate window argument
                validateattributes( ...
                    varargin{2}, ...
                    {'float'}, ...
                    { ...
                        'row', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan', ...
                        'numel', 2, ...
                        '>=', 1, ...
                        }, ...
                    fname, ...
                    'window' ...
                    );

                % Validate number os samples argument
                validateattributes( ...
                    varargin{3}, ...
                    {'float'}, ...
                    { ...
                        'scalar', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan', ...
                        '>=', 1, ...
                        }, ...
                    fname, ...
                    'n' ...
                    );

                % Validate value argument
                validateattributes( ...
                    varargin{4}, ...
                    {'float'}, ...
                    { ...
                        'scalar', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan', ...
                        }, ...
                    fname, ...
                    'value' ...
                    );

                % Validate stdev argument
                validateattributes( ...
                    varargin{5}, ...
                    {'float'}, ...
                    { ...
                        'scalar', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan', ...
                        }, ...
                    fname, ...
                    'stdev' ...
                    );

                % Assign argument values to ds object
                ds.position = varargin{1};
                ds.window   = varargin{2};
                ds.n        = varargin{3};
                ds.value    = varargin{4};
                ds.stdev    = varargin{4};

            else
                % Invalid call to constructor
                error( ...
                    'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
                    fname, ...
                    use_case_a, ...
                    use_case_b, ...
                    use_case_c ...
                    );

            endif;  % 0 == nargin

        endfunction;  % DataSample()


        function disp(ds)
%  ----------------------------------------------------------------------------
%
%  Method 'disp':
%
%  Use:
%       -- ds.disp()
%
%  Description:
%          The disp method is used by Octave whenever a instance of the class
%          should be displayed on the screen.
%
%  ----------------------------------------------------------------------------
            printf( ...
                cstrcat(
                    '\tDataSample("%d", "%d", "%d", "%d", "%d", "%5.2f",', ...
                    ' "%5.2f")\n' ...
                    ), ...
                ds.position(1), ...
                ds.position(2), ...
                ds.window(1), ...
                ds.window(2), ...
                ds.n,
                ds.value, ...
                ds.stdev ...
                );

        endfunction;


        function dscell = ascell(ds)
% -----------------------------------------------------------------------------
%
% Method 'ascell':
%
% Use:
%       -- dscell = ds.ascell()
%
% Description:
%          Return data sample properties as cell array of strings. This
%          function is required if the class is used as model for the
%          table view.
%
% -----------------------------------------------------------------------------
            ds_cell = {};

            if(ds.isnan())
                dscell = {'', '', '', '', '', '', '';};

            else
                dscell = { ...
                    sprintf('%d', ds.position(1)), ...
                    sprintf('%d', ds.position(2)), ...
                    sprintf('%d', ds.window(1)), ...
                    sprintf('%d', ds.window(2)), ...
                    sprintf('%d', ds.n),
                    sprintf('%5.2f', ds.value), ...
                    sprintf('%5.2f', ds.stdev) ...
                    };

            endif;

        endfunction;


        function dsrow = asrow(ds)
%  ----------------------------------------------------------------------------
%
%  Method 'asrow':
%
%  Use:
%       -- dsrow = ds.asrow()
%
%  Description:
%          Return ds as row vector.
%
%  ----------------------------------------------------------------------------
            dsrow = [];

            if(~ds.isnan())
                dsrow = [ ...
                    ds.position(1), ...
                    ds.position(2), ...
                    ds.window(1), ...
                    ds.window(2), ...
                    ds.n, ...
                    ds.value, ...
                    ds.stdev ...
                ];

            endif;

        endfunction;


        function result = isnan(ds)
%  ----------------------------------------------------------------------------
%
%  Method 'isnan':
%
%  Use:
%       -- ds.isnan()
%
%  Description:
%          Check if given ds is a NaN ds. DataSample instance is NaN if it is
%          created using standard sonctructor (i.e. all of it parameters have
%          zero values.
%
%  ----------------------------------------------------------------------------
            result = false;
            if(ds.isequal(DataSample()))
                result = true;

            endif;

        endfunction;


        function result = isequivalent(ds, other)
%  ----------------------------------------------------------------------------
%
%  Method 'isequivalent':
%
%  Use:
%       -- result = ds.isequivalent(other)
%
%  Description:
%          Return whether or not two data samples are equivalent.
%          Two data samples are equivalent if they have equal windows.
%
%  ----------------------------------------------------------------------------
            fname = 'isequivalent';

            if(~isa(other, 'DataSample'))
                error( ...
                    sprintf( ...
                        cstrcat( ...
                            '%s: other must be an instance of the ', ...
                            '"DataSample" class' ...
                            ), ...
                        fname ...
                        ) ...
                    );

            endif;

            % Initialize result to a default value
            result = false;
            if(isequal(ds.window, other.window));
                result = true;

            endif;

        endfunction;


        function result = isequal(ds, other)
%  ----------------------------------------------------------------------------
%
%  Method 'isequal':
%
%  Use:
%       -- result = ds.isequal(other)
%
%  Description:
%          Return whether or not two data samples are equal. Two data samples
%          are equal if all their properties have equal values. We use machine
%          precision (i.e. eps()) as the criteria if two real numvers are equal
%          (e.g. val1 - val2 <= eps() => two values are equal).
%
%  ----------------------------------------------------------------------------
            fname = 'isequal';

            if(~isa(other, 'DataSample'))
                error( ...
                    sprintf( ...
                        cstrcat( ...
                            '%s: other must be an instance of the ', ...
                            '"DataSample" class' ...
                            ), ...
                        fname ...
                        ) ...
                    );

            endif;

            % Initialize result to a default value
            result = false;
            if( ...
                    isequal(other.position, ds.position) ...
                    && isequal(other.window, ds.window) ...
                    && isequal(other.n, ds.n)  ...
                    && (other.value - ds.value) <= eps() ...
                    && (other.stdev - ds.stdev) <= eps() ...
                    )
                result = true;

            endif;

        endfunction;

    endmethods;

endclassdef;  % DataSample
