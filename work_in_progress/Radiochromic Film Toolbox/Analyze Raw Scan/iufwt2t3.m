% -----------------------------------------------------------------------------
%
% Function 'iufwt2':
%
% Use:
%       -- f = iufwt2(A, H, V, D, w, fs)
%
% Description:
%       Performs a multilevel 2-D stationary wavelet reconstruction of the
%       signal f using wavelet filters defined by w.
%
%       For all accepted formats of the parameter w see the fwtinit function of
%       the package 'ltfat'.
%
%       For all accepted formats of the parameter fs see the ufwt function of
%       the package 'ltfat'.
%
%       The function requires 'ltfat' package installed to work.
%
% -----------------------------------------------------------------------------
function f = iufwt2(A, H, V, D, w, fs='sqrt')
    fname = 'iufwt2';
    use_case_a = ' -- iufwt2(A, H, V, D, w)';
    use_case_b = ' -- iufwt2(A, H, V, D, w, fs)';

    % Add required packages to the path ---------------------------------------
    pkg load ltfat;

    % Validate input arguments ------------------------------------------------

    % Check the number of input parameters
    if(5 ~= nargin && 6 ~= nargin)
        % Invalid call to function
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b ...
            );

    endif;

    % Validate input coeficients format
    validateattributes( ...
        A, ...
        {'float'}, ...
        { ...
            '2d', ...
            'finite', ...
            'nonempty', ...
            'nonnan' ...
            }, ...
        fname, ...
        'A' ...
        );
    validateattributes( ...
        H, ...
        {'float'}, ...
        { ...
            '3d', ...
            'finite', ...
            'nonempty', ...
            'nonnan' ...
            }, ...
        fname, ...
        'H' ...
        );
    validateattributes( ...
        V, ...
        {'float'}, ...
        { ...
            '3d', ...
            'finite', ...
            'nonempty', ...
            'nonnan' ...
            }, ...
        fname, ...
        'V' ...
        );
    validateattributes( ...
        D, ...
        {'float'}, ...
        { ...
            '3d', ...
            'finite', ...
            'nonempty', ...
            'nonnan' ...
            }, ...
        fname, ...
        'D' ...
        );

    % Coeficient matrices must match in size
    length = size(A, 1);
    width = size(A, 2);
    J = size(H, 3);
    if(length ~= size(H, 1) || width ~= size(H, 2))
        error( ...
            '%s: Size of matrix H not in compliance with reference (A)', ...
            fname ...
            );
    elseif(length ~= size(V, 1) || width ~= size(V, 2) || J ~= size(V, 3))
        error( ...
            '%s: Size of matrix V not in compliance with reference (H)', ...
            fname ...
            );
    elseif(length ~= size(D, 1) || width ~= size(D, 2) || J ~= size(D, 3))
        error( ...
            '%s: Size of matrix D not in compliance with reference (H)', ...
            fname ...
            );
    endif;

    % Validate value(s) supplied for the wavelet filterbank definition
    try
        w = fwtinit(w);

    catch err
        error( ...
            '%s: %s', ...
            fname, ...
            err.message ...
            );

    end_try_catch;

    % Validate value supplied for the filter scaling
    validatestring( ...
        fs, ...
        {'noscale', 'scale', 'sqrt'}, ...
        fname, ...
        'fs' ...
        );

    % Reconstruct the signal f ------------------------------------------------
    c = zeros(length, J + 1, width);
    d = e = zeros(width, 2, length);  % These coefficients are transpose of c(:, 1, :) and c(:, 2, :)
    idx = 1;
    while(J >= idx)
        e(:, 1, :) = reshape(V', width, 1, length);
        e(:, 2, :) = reshape(H', width, 1, length);
        c(:, idx + 1, :) = iufwt(e, w, idx, fs)';

        ++idx;

    endwhile;

    d(:, 1, :) = reshape(A', width, 1, length);
    d(:, 2, :) = reshape(V(:, :, end)', width, 1, length);
    c(:, 1, :) = iufwt(d, w, J, fs)';
    f = iufwt(c, w, J, fs);

endfunction;
