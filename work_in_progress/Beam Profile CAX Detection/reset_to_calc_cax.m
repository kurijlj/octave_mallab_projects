function [xR, DpR] = reset_to_calc_cax(x, Dp)
% -----------------------------------------------------------------------------
%
% Function 'reset_to_calc_cax':
%
% Use:
%       -- [xR, DpR] = reset_to_calc_cax(x, Dp)
%
% Description:
%       Calculate beam profile CAX by numerically finding bea profile edges and
%       then remap input data to the calculated postion of the CAX.
%
%       x  1D array representing detector positions in milimeters in the water
%          tank during beam scanning procedure.
%
%       Dp 1D array representing detector reading for the given detector
%          positions in the water tank during beam scanning procedure.
%
% -----------------------------------------------------------------------------
    fname = 'reset_to_calc_cax';
    use_case_a = sprintf('-- [lE, rE] = %s(x, Dp)', fname);

    % Validate number of passed arguments
    if(2 ~= nargin)
        % Invalid call to function
        error( ...
            'Invalid call to %s. Correct usage is:\n%s', ...
            fname, ...
            use_case_a ...
            );

    endif;

    % Validate detector positions array
    validateattributes( ...
        x, ...
        {'float'}, ...
        { ...
            'nonempty', ...
            '2d', ...
            'vector', ...
            'finite', ...
            'real' ...
            }, ...
        fname, ...
        'x' ...
        );

    % Validate detector reading array
    validateattributes( ...
        x, ...
        {'float'}, ...
        { ...
            'nonempty', ...
            '2d', ...
            'vector', ...
            'finite', ...
            'real' ...
            }, ...
        fname, ...
        'x' ...
        );

    % Validate that inupt arrays match in number of elements
    if(numel(x) ~= numel(Dp))
        error( ...
            '%s: Nonconformant arguments (numel(x)=%d ~= numel(Dp)=%d)', ...
            fname, ...
            numel(x), ...
            numel(Dp) ...
            );

    endif;

    % We work with column vectors so reshape input arrays as column vectors,
    % if not
    if(1 == size(x, 1))
        x = x';

    endif;
    if(1 == size(Dp, 1))
        Dp = Dp';

    endif;

    % Calculate profile CAX
    [lE, rE] = find_profile_edges(x, Dp);
    CAX = find_profile_cax(lE, rE);

    % Remap given profile data to the calculated CAX
    xR  = x - CAX;
    DpR = Dp;

endfunction;
