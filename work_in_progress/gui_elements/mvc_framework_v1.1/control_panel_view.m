control_panel_view_version = '1.0';

source('./gui_commons.m');
source('./app_uistyle_model.m');
source('./item_data_model.m');

% -----------------------------------------------------------------------------
%
% Function 'controlPanelViewNewView':
%
% Use:
%       -- controlPanelViewNewView()
%       -- controlPanelViewNewView(..., "PROPERTY", VALUE, ...)
%       -- hview = controlPanelViewNewView(...)
%
% Description:
%          TODO: Add function description here
%
% -----------------------------------------------------------------------------
function hview = controlPanelViewNewView(varargin)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'controlPanelViewNewView';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '()' ...
        }, '');
    use_case_b = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(..., "PROPERTY", VALUE, ...)' ...
        }, '');
    use_case_c = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(...)' ...
        }, '');

    % Define number of supported positional parameters ------------------------

    % Define number of supported positional (numerical) parameters
    numpos = 0;

    % Define number of supported optional parameters
    numopt = 5;

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments. We determin the minimum number of
    % input arguments as number of suported positional arguments (numpos). The
    % number of maximal possible input arguments we determine as sum of numpos
    % and number of optional parameters multiplied by two (this takes into
    % account values of supplied optional parameters)
    narginchk(numpos, numpos + 2*numopt);

    % Parse arguments
    [ ...
        pos, ...
        view_tag, ...
        title, ...
        uistyle, ...
        hparent, ...
        on_btn_push_callback ...
        ] = parseparams( ...
        varargin, ...
        'view_tag', 'item_edit_view', ...
        'title', 'Item Edit View', ...
        'uistyle', appUiStyleModelNewUiStyle(), ...  % Use default UI style
        'parent', NaN, ...  %WARNING: do not set this to 0 it is the result of groot()!
        'OnBtnPushCallback', NaN ...
        );

    % Validate the number of positional parameters
    if(numpos ~= numel(pos))
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b, ...
            use_case_c ...
            );

    endif;

    % Validate argument values ------------------------------------------------

    % Validate view_tag argument
    if(~ischar(view_tag))
        error( ...
            '%s: view_tag must be a character array', ...
            fname
            );
    endif;

    % Validate title argument
    if(~ischar(title))
        error( ...
            '%s: title must be a character array', ...
            fname
            );
    endif;

    % Validate uistyle argument
    if(~appUiStyleModelIsUiStyleObj(uistyle))
        error( ...
            '%s: uistyle must be an instance of the App UI Style data structure', ...
            fname
            );

    endif;

    % Validate hparent argument
    if(~isnan(hparent) && ~ishghandle(hparent))
        error( ...
            '%s: parent must be handle to a graphics object', ...
            fname
            );

    endif;

    % Validate on_btn_push_callback argument
    if( ...
            ~is_function_handle(on_btn_push_callback) ...
            && ~isnan(on_btn_push_callback) ...
            )
        error( ...
            '%s: on_btn_push_callback must be handle to a function or NaN', ...
            fname
            );

    endif;

    % Check if we have parent object
    if(isnan(hparent))
        % We don't have handle to a parent UI container, so we need to run 'Item
        % List View' as a standalone application, within it's own figure and
        % with underlying app_data

        % Initialize GUI toolkit
        graphics_toolkit qt;

        % Create figure and define it as parent to 'Item' view
        hparent = figure( ...
            'name', 'Control Panel', ...
            'menubar', 'none', ...
            'tag', 'main_figure' ...
            );

        % Since we are running in our own figure connect selected item change
        % signal to the default callback
        on_btn_push_callback = @controlPanelViewDefaultCallback;

    endif;

    % Create new view
    hview = controlPanelViewLayoutView( ...
        hparent, ...
        'view_tag', view_tag, ...
        'title', title, ...
        'uistyle', uistyle, ...
        'OnBtnPushCallback', on_btn_push_callback ...
        );

    % Connect size changed signal to it's slot
    set( ...
        ancestor(hparent, 'figure'), ...
        'sizechangedfcn', {@controlPanelViewUpdateView, view_tag, uistyle} ...
        );

endfunction;

% -----------------------------------------------------------------------------
%
% function 'controlPanelViewLayoutView':
%
% use:
%       -- controlPanelViewLayoutViewiew(hparent)
%       -- controlPanelViewLayoutView(..., "PROPERTY", VALUE, ...)
%       -- hview = controlPanelViewLayoutView(...)
%
% Description:
%          TODO: Add function description here
%
% -----------------------------------------------------------------------------
function hview = controlPanelViewLayoutView(varargin)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'controlPanelViewLayoutView';
    use_case_a = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(hparent)' ...
        }, '');
    use_case_b = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(..., "PROPERTY", VALUE, ...)' ...
        }, '');
    use_case_c = strjoin({ ...
        ' -- hview = ', ...
        fname, ...
        '(...)' ...
        }, '');

    % Define number of supported positional parameters ------------------------

    % Define number of supported positional (numerical) parameters
    numpos = 1;

    % Define number of supported optional parameters
    numopt = 4;

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    narginchk(numpos, numpos + 2*numopt);

    % Parse arguments
    [ ...
        pos, ...
        view_tag, ...
        title, ...
        uistyle, ...
        on_btn_push_callback ...
        ] = parseparams( ...
        varargin, ...
        'view_tag', 'item_edit_view', ...
        'title', 'Item Edit View', ...
        'uistyle', appUiStyleModelNewUiStyle(), ...  % Use default UI style
        'OnBtnPushCallback', NaN ...
        );

    % Validate the number of positional parameters
    if(numpos ~= numel(pos))
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b, ...
            use_case_c ...
            );

    endif;

    % Validate hparent argument
    hparent = pos{1};
    if(~ishghandle(hparent))
        error( ...
            '%s: hparent must be handle to a graphics object', ...
            fname
            );

    endif;

    % Validate view_tag argument
    if(~ischar(view_tag))
        error( ...
            '%s: view_tag must be a character array', ...
            fname
            );
    endif;

    % Validate title argument
    if(~ischar(title))
        error( ...
            '%s: title must be a character array', ...
            fname
            );
    endif;

    % Validate uistyle argument
    if(~appUiStyleModelIsUiStyleObj(uistyle))
        error( ...
            '%s: uistyle must be an instance of the App UI Style data structure', ...
            fname
            );

    endif;

    % Validate callback argument
    if( ...
            ~is_function_handle(on_btn_push_callback) ...
            && ~isnan(on_btn_push_callback) ...
            )
        error( ...
            '%s: on_btn_push_callback must be handle to a function or NaN', ...
            fname
            );

    endif;

    % Get figure containing the parent object ---------------------------------
    hfig = ancestor(hparent, 'figure');

    % Initialize gui elements positions ---------------------------------------
    position = controlPanelViewElementsPosition(hparent, uistyle);

    % Create 'Control Panel' view panel --------------------------------------
    view_panel = uipanel( ...
        'parent', hparent, ...
        'title', title, ...
        'tag', view_tag, ...
        'position', position(1, :) ...
        );

    % Create button controls --------------------------------------------------

    % Set 'Accept' button -----------------------------------------------------
    uicontrol( ...
        'parent', view_panel, ...
        'tag', strjoin({view_tag, 'accept_button'}, '_'), ...
        'callback', { ...
            @controlPanelViewOnBtnPush, ...
            'accept', ...
            on_btn_push_callback ...
            }, ...
        'style', 'pushbutton', ...
        'string', 'Accept', ...
        'units', 'normalized', ...
        'position', position(3, :) ...
        );

    % Set 'Cancel' button -----------------------------------------------------
    uicontrol( ...
        'parent', view_panel, ...
        'tag', strjoin({view_tag, 'cancel_button'}, '_'), ...
        'callback', { ...
            @controlPanelViewOnBtnPush, ...
            'cancel', ...
            on_btn_push_callback ...
            }, ...
        'style', 'pushbutton', ...
        'string', 'Cancel', ...
        'units', 'normalized', ...
        'position', position(2, :) ...
        );

    hview = view_panel;

endfunction;

% -----------------------------------------------------------------------------
%
% Function 'controlPanelViewUpdateView':
%
% Use:
%       -- controlPanelViewUpdateView(hsrc, evt, view_tag, uistyle)
%
% Description:
%          TODO: Add function description here
%
% -----------------------------------------------------------------------------
function controlPanelViewUpdateView(hsrc, evt, view_tag, uistyle)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'controlPanelViewUpdateView';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(hsrc, evt, view_tag, uistyle)' ...
        }, '');

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    if(4 ~= nargin)
        error('Invalid call to %s. Correct usage is:\n%s', fname, use_case_a);

    endif;

    % Validate hsrc argument
    if(~isfigure(hsrc))
        error( ...
            '%s: hsrc must be handle to a figure', ...
            fname
            );

    endif;

    % We ignore evt argument

    % Validate view_tag argument
    if(~ischar(view_tag))
        error( ...
            '%s: view_tag must be a character array', ...
            fname
            );
    endif;

    % Validate uistyle argument
    if(~appUiStyleModelIsUiStyleObj(uistyle))
        error( ...
            '%s: uistyle must be an instance of the App UI Style data structure', ...
            fname
            );

    endif;

    % Get figure handles
    figure_handles = guihandles(hsrc);

    % Check if the calling figure holds our view, else we ignore the signal
    if(isfield(figure_handles, view_tag))

        % Get GUI elements postions
        position = controlPanelViewElementsPosition( ...
            get(getfield(figure_handles, view_tag), 'parent'), ...
            uistyle ...
            );

        % Reset elements position
        set( ...
            getfield(figure_handles, view_tag), ...
            'position', position(1, :) ...
            );
        set( ...
            getfield(figure_handles, strjoin({view_tag, 'cancel_button'}, '_')), ...
            'position', position(2, :) ...
            );
        set( ...
            getfield(figure_handles, strjoin({view_tag, 'accept_button'}, '_')), ...
            'position', position(3, :) ...
            );

    endif;

endfunction;

% -----------------------------------------------------------------------------
%
% Function 'controlPanelViewElementsPosition':
%
% Use:
%       -- position = controlPanelViewElementsPosition(hcntr, uistyle)
%
% Description:
%          TODO: Add function description here
%
% -----------------------------------------------------------------------------
function position = controlPanelViewElementsPosition(hcntr, uistyle)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'controlPanelViewElementsPosition';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(hcntr, uistyle)' ...
        }, '');

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    if(2 ~= nargin)
        error( ...
            'Invalid call to %s. Correct usage is:\n%s', ...
            fname, ...
            use_case_a ...
            );

    endif;

    % Validate hcntr argument
    if(~ishghandle(hcntr))
        error( ...
            '%s: hsrc must be handle to a graphics object', ...
            fname
            );

    endif;

    % Validate uistyle argument
    if(~appUiStyleModelIsUiStyleObj(uistyle))
        error( ...
            '%s: uistyle must be an instance of the App UI Style data structure', ...
            fname
            );

    endif;

    % Define return value as matrix -------------------------------------------
    position = [];

    % Calculate relative extents ----------------------------------------------
    cexts = getpixelposition(hcntr);
    horpadabs = uistyle.padding_px / cexts(3);
    verpadabs = uistyle.padding_px / cexts(4);
    btnwdtabs = uistyle.btn_width_px / cexts(3);
    btnhghabs = uistyle.btn_height_px / cexts(4);
    clmwdtabs = uistyle.column_width_px / cexts(3);
    rowhghabs = uistyle.row_height_px / cexts(4);

    % Set padding for the main panel ------------------------------------------
    position = [ ...
        position; ...
        horpadabs, ...
        verpadabs, ...
        1.00 - 2*horpadabs, ...
        1.00 - 2*verpadabs; ...
        ];

    % Set button positions ----------------------------------------------------
    idx = 1;
    while(2 >= idx)
        position = [ ...
            position; ...
            (1.00 - btnwdtabs)/2, ...
            verpadabs + (idx - 1)*(btnhghabs + verpadabs), ...
            btnwdtabs, ...
            btnhghabs; ...
            ];

        idx = idx + 1;

    endwhile;

endfunction;

% -----------------------------------------------------------------------------
%
% Function 'controlPanelViewDefaultCallback':
%
% Use:
%       -- controlPanelViewDefaultCallback(hfview, option)
%
% Description:
% TODO: Add function description here.
%
% -----------------------------------------------------------------------------
function controlPanelViewDefaultCallback(hview, option)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'controlPanelViewDefaultCallback';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(hview, option)' ...
        }, '');

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    if(2 ~= nargin)
        error('Invalid call to %s. Correct usage is:\n%s', fname, use_case_a);

    endif;

    % Validate hiew argument
    if(~ishghandle(hview))
        error( ...
            '%s: hview must be handle to a graphics object', ...
            fname
            );

    endif;

    % Validate option argument
    validatestring( ...
        option, ...
        {'accept', 'cancel'}, ...
        fname, ...
        'option' ...
        );

    % Get handle to view fields -----------------------------------------------

    % Get view tag
    view_tag = guiObjectTag(hview);

    % Print output to the workspace -------------------------------------------

    printf('%s: %s (%s)\n', fname, option, view_tag);

endfunction;

% -----------------------------------------------------------------------------
%
% Function 'controlPanelViewOnBtnPush':
%
% Use:
%       -- controlPanelViewOnBtnPush(hsrc, evt, option)
%
% Description:
%          TODO: Add function description here
%
% -----------------------------------------------------------------------------
function controlPanelViewOnBtnPush(hsrc, evt, option, callback=NaN)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'controlPanelViewOnBtnPush';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(hsrc, evt, option)' ...
        }, '');

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments
    if(3 ~= nargin && 4 ~= nargin)
        error('Invalid call to %s. Correct usage is:\n%s', fname, use_case_a);

    endif;

    % Validate hsrc argument
    if(~ishghandle(hsrc))
        error( ...
            '%s: hsrc must be handle to a graphics object', ...
            fname
            );

    endif;

    % Validate option argument
    validatestring( ...
        option, ...
        {'accept', 'cancel'}, ...
        fname, ...
        'option' ...
        );

    % Validate callback argument
    if(~is_function_handle(callback) && ~isnan(callback))
        error( ...
            '%s: callback must be handle to a function or NaN', ...
            fname
            );

    endif;

    % Process events ----------------------------------------------------------

    if(is_function_handle(callback))

        % Execute callback ----------------------------------------------------
        callback(get(hsrc, 'parent'), option);

    endif;

    % Close the figure --------------------------------------------------------
    close(ancestor(hsrc, 'figure'));

endfunction;
