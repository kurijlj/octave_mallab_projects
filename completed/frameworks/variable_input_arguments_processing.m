variable_input_arguments_provessing_version = '1.0';

% -----------------------------------------------------------------------------
%
% Function 'variableInputArgumentsProcessing':
%
% Use:
%       -- variableInputArgumentsProcessing(varargin)
%
% Description:
% TODO: Put function description here.
%
% -----------------------------------------------------------------------------
function variableInputArgumentsProcessing(varargin)

    % Store function name into variable
    % for easier management of error messages ---------------------------------
    fname = 'variableInputArgumentsProcessing';
    use_case_a = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(varargin)' ...
        }, '');
    use_case_b = strjoin({ ...
        ' -- ', ...
        fname, ...
        '(varargin)' ...
        }, '');

    % Define number of supported positional parameters ------------------------

    % Define number of supported positional (numerical) parameters
    numpos = 1;

    % Define number of supported optional parameters
    numopt = 2;

    % Validate input arguments ------------------------------------------------

    % Validate number of input arguments. We determin the minimum number of
    % input arguments as number of suported positional arguments (numpos). The
    % number of maximal possible input arguments we determine as sum of numpos
    % and number of optional parameters multiplied by two (this takes into
    % account values of supplied optional parameters)
    narginchk(numpos, numpos + 2*numopt);

    % Parse arguments
    [pos, p1val, p2val] = parseparams(varargin, 'param1', 'A', 'param2', 0);

    % Validate the number of positional parameters
    if(numpos ~= numel(pos{:}))
        error( ...
            'Invalid call to %s. Correct usage is:\n%s\n%s', ...
            fname, ...
            use_case_a, ...
            use_case_b ...
            );

    endif;

    % Validate argument values
    validateattributes( ...
        pos{1}, ...
        {'float'}, ...
        { ...
            '>=', 0, ...
            'finite', ...
            'integer', ...
            'nonempty', ...
            'nonnan', ...
            'scalar' ...
            }, ...
        fname, ...
        'P1' ...
        );

    validatestring( ...
        p1val, ...
        {'A', 'B', 'C'}, ...
        fname, ...
        'param1' ...
        );

    validateattributes( ...
        p2val, ...
        {'float'}, ...
        {'scalar', '>=', 0, '<=', 1}, ...
        fname, ...
        'p2val' ...
        );

endfunction;
